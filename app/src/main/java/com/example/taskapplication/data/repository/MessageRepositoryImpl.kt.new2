    override suspend fun retrySendMessage(clientTempId: String): Result<Message> {
        try {
            // Tìm tin nhắn theo clientTempId
            val message = messageDao.getMessageByClientTempId(clientTempId)
                ?: return Result.failure(IOException("Message not found"))

            // Cập nhật trạng thái để gửi lại
            val updatedMessage = message.copy(
                syncStatus = "pending_create",
                lastModified = System.currentTimeMillis()
            )

            messageDao.updateMessage(updatedMessage)

            // Nếu có kết nối mạng, gửi lên server
            if (connectionChecker.isNetworkAvailable()) {
                try {
                    // Triển khai gửi lên server ở đây
                    // Hiện tại chỉ trả về thành công vì chúng ta đã lưu vào local database
                } catch (e: Exception) {
                    Log.e(TAG, "Lỗi khi gửi lại tin nhắn lên server", e)
                    // Không trả về lỗi vì đã lưu thành công vào local database
                }
            }

            // Lấy danh sách tệp đính kèm
            val attachments = attachmentDao.getAttachmentsByMessageIdSync(updatedMessage.id)
                .map { it.toDomainModel() }

            return Result.success(updatedMessage.toDomainModel(emptyList(), emptyList(), attachments))
        } catch (e: Exception) {
            Log.e(TAG, "Lỗi khi thử gửi lại tin nhắn", e)
            return Result.failure(e)
        }
    }

    override suspend fun updateMessage(message: Message): Result<Message> {
        try {
            val messageEntity = message.toEntity().copy(
                syncStatus = "pending_update",
                lastModified = System.currentTimeMillis()
            )

            messageDao.updateMessage(messageEntity)

            // Nếu có kết nối mạng, đồng bộ lên server
            if (connectionChecker.isNetworkAvailable()) {
                try {
                    // Triển khai đồng bộ với server ở đây
                    // Hiện tại chỉ trả về thành công vì chúng ta đã lưu vào local database
                } catch (e: Exception) {
                    Log.e(TAG, "Lỗi khi cập nhật tin nhắn trên server", e)
                    // Không trả về lỗi vì đã lưu thành công vào local database
                }
            }

            // Lấy danh sách tệp đính kèm
            val attachments = attachmentDao.getAttachmentsByMessageIdSync(messageEntity.id)
                .map { it.toDomainModel() }

            return Result.success(messageEntity.toDomainModel(emptyList(), emptyList(), attachments))
        } catch (e: Exception) {
            Log.e(TAG, "Lỗi khi cập nhật tin nhắn", e)
            return Result.failure(e)
        }
    }

    override suspend fun editMessage(messageId: String, newContent: String): Result<Message> {
        try {
            val message = messageDao.getMessage(messageId)
                ?: return Result.failure(IOException("Message not found"))

            // Kiểm tra quyền chỉnh sửa (chỉ người gửi mới có quyền chỉnh sửa)
            val currentUserId = dataStoreManager.getCurrentUserId() ?: return Result.failure(IOException("User not logged in"))
            if (message.senderId != currentUserId) {
                return Result.failure(IOException("Bạn không có quyền chỉnh sửa tin nhắn này"))
            }

            // Cập nhật nội dung tin nhắn
            val updatedMessage = message.copy(
                content = newContent,
                syncStatus = "pending_update",
                lastModified = System.currentTimeMillis()
            )

            messageDao.updateMessage(updatedMessage)

            // Nếu có kết nối mạng, đồng bộ lên server
            if (connectionChecker.isNetworkAvailable()) {
                try {
                    // Triển khai đồng bộ với server ở đây
                    // Hiện tại chỉ trả về thành công vì chúng ta đã lưu vào local database
                } catch (e: Exception) {
                    Log.e(TAG, "Lỗi khi chỉnh sửa tin nhắn trên server", e)
                    // Không trả về lỗi vì đã lưu thành công vào local database
                }
            }

            // Lấy danh sách tệp đính kèm
            val attachments = attachmentDao.getAttachmentsByMessageIdSync(updatedMessage.id)
                .map { it.toDomainModel() }

            return Result.success(updatedMessage.toDomainModel(emptyList(), emptyList(), attachments))
        } catch (e: Exception) {
            Log.e(TAG, "Lỗi khi chỉnh sửa tin nhắn", e)
            return Result.failure(e)
        }
    }
