    override suspend fun getTeamUnreadMessageCount(teamId: String): Result<Int> {
        try {
            val currentUserId = dataStoreManager.getCurrentUserId() ?: return Result.failure(IOException("User not logged in"))
            val count = messageDao.getUnreadMessageCount(teamId, currentUserId)
            return Result.success(count)
        } catch (e: Exception) {
            Log.e(TAG, "Lỗi khi lấy số lượng tin nhắn chưa đọc của nhóm", e)
            return Result.failure(e)
        }
    }

    override suspend fun getOlderTeamMessages(teamId: String, olderThan: Long, limit: Int): Result<List<Message>> {
        try {
            val messages = messageDao.getOlderTeamMessages(teamId, olderThan, limit)
            val result = messages.map { entity ->
                val attachments = attachmentDao.getAttachmentsByMessageIdSync(entity.id)
                    .map { it.toDomainModel() }
                entity.toDomainModel(emptyList(), emptyList(), attachments)
            }
            return Result.success(result)
        } catch (e: Exception) {
            Log.e(TAG, "Lỗi khi lấy tin nhắn cũ hơn của nhóm", e)
            return Result.failure(e)
        }
    }

    override suspend fun sendTypingStatus(teamId: String, isTyping: Boolean): Result<Unit> {
        try {
            val currentUserId = dataStoreManager.getCurrentUserId() ?: return Result.failure(IOException("User not logged in"))
            
            // Nếu có kết nối mạng, gửi trạng thái đang nhập lên server
            if (connectionChecker.isNetworkAvailable()) {
                try {
                    // Triển khai gửi trạng thái đang nhập lên server ở đây
                    // Hiện tại chỉ trả về thành công
                } catch (e: Exception) {
                    Log.e(TAG, "Lỗi khi gửi trạng thái đang nhập", e)
                    return Result.failure(e)
                }
            }
            
            return Result.success(Unit)
        } catch (e: Exception) {
            Log.e(TAG, "Lỗi khi gửi trạng thái đang nhập", e)
            return Result.failure(e)
        }
    }

    override suspend fun syncMessages(): Result<Unit> {
        // Triển khai đồng bộ hóa tất cả tin nhắn
        return Result.success(Unit)
    }

    override suspend fun syncTeamMessages(teamId: String): Result<Unit> {
        // Triển khai đồng bộ tin nhắn của team
        return Result.success(Unit)
    }

    override suspend fun saveMessage(message: Message) {
        messageDao.insertMessage(message.toEntity())
    }

    override suspend fun saveReadStatus(readStatus: MessageReadStatus) {
        // Triển khai lưu trạng thái đọc
    }

    override suspend fun markMessageAsDeleted(messageId: String) {
        // Triển khai đánh dấu tin nhắn đã xóa
        messageDao.markMessageAsDeleted(messageId, System.currentTimeMillis())
    }
}
